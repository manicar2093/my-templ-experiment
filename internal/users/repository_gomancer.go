// Code generated by gomancer
package users

import (
	"maps"
	"slices"
	connections "templ-demo/core/connections"
	models "templ-demo/internal/domain/models"
	"time"

	uuid "github.com/google/uuid"
	goption "github.com/manicar2093/goption"
	gormpager "github.com/manicar2093/gormpager"
	clause "gorm.io/gorm/clause"
)

type UserRepository struct {
	db *connections.ConnWrapper
}

func NewUserRepository(db *connections.ConnWrapper) *UserRepository {
	return &UserRepository{db: db}
}

// Save can Create and Update an entity. You can use this for http PATH method. Check https://gorm.io/docs/update.html#Save-All-Fields for more info
func (c *UserRepository) Save(input *models.User) error {
	if res := c.db.Save(input); res.Error != nil {
		return res.Error
	}
	return nil
}

func (c *UserRepository) GetById(id uuid.UUID) (*models.User, error) {
	var found models.User
	if res := c.db.First(&found, id); res.Error != nil {
		return nil, res.Error
	}
	return &found, nil
}

func (c *UserRepository) GetAllPaginated(pageNumber, pageSize int) (*gormpager.Page[models.User], error) {
	pager := gormpager.Page[models.User]{PageSize: int64(pageSize), CurrentPage: int64(pageNumber)}
	if err := pager.SelectPages(c.db.GormPager, c.db.DB); err != nil {
		return nil, err
	}
	return &pager, nil
}

type PartialUpdateByIdInput struct {
	Id        uuid.UUID                   `json:"id" param:"id" validate:"required_uuid"`
	Email     goption.Optional[string]    `json:"email" form:"email"`
	Password  goption.Optional[string]    `json:"password" form:"password"`
	CreatedAt goption.Optional[time.Time] `json:"created_at" form:"created_at"`
}

// PartialUpdateById can select which field has to be updated from given input
func (c *UserRepository) PartialUpdateById(changes PartialUpdateByIdInput) (*models.User, error) {
	var (
		result  = models.User{}
		updates = map[string]any{}
	)

	if changes.Email.IsPresent() {
		updates["email"] = changes.Email.MustGet()
	}
	if changes.Password.IsPresent() {
		updates["password"] = changes.Password.MustGet()
	}
	if changes.CreatedAt.IsPresent() {
		updates["created_at"] = changes.CreatedAt.MustGet()
	}

	if len(slices.Collect(maps.Keys(updates))) == 0 {
		if res := c.db.First(&result, changes.Id); res.Error != nil {
			return nil, res.Error
		}
		return &result, nil
	}

	if res := c.db.Model(&result).Clauses(clause.Returning{}).Where("id = ?", changes.Id).Updates(updates); res.Error != nil {
		return nil, res.Error
	}

	return &result, nil
}

func (c *UserRepository) DeleteById(id uuid.UUID) error {
	if res := c.db.Delete(&models.User{}, "id = ?", id); res.Error != nil {
		return res.Error
	}
	return nil
}
