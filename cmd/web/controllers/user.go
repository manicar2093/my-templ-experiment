// Code generated by gomancer
package controllers

import (
	"fmt"
	"net/http"
	"templ-demo/cmd/web/ui/userpages"

	core "templ-demo/core"
	commonreq "templ-demo/core/commonreq"
	models "templ-demo/internal/domain/models"
	user "templ-demo/internal/user"

	echo "github.com/labstack/echo/v4"
)

const (
	ShowUserUrl = "/users/%s"
)

type UserController struct {
	userRepository *user.UserRepository
}

func NewUserController(userRepository *user.UserRepository) *UserController {
	return &UserController{
		userRepository: userRepository,
	}
}

func (c *UserController) SetUpRoutes(group *echo.Group) {
	userGroup := group.Group("/users")

	// Show all users
	userGroup.GET("", c.GetAllPaginatedHandler)
	// Send page to edit a user
	userGroup.GET("/:id/edit", c.GetEditionHandler)
	// Sends page to registry a user
	userGroup.GET("/new", c.GetRegistrationPageHandler)
	// Send page to show a user
	userGroup.GET("/:id", c.GetShowUserPageHandler)
	// Creates a user
	userGroup.POST("", c.SaveHandler)
	// Patch user
	userGroup.PATCH("/:id", c.PartialUpdateByIdHandler)
	// Updates all user
	userGroup.PUT("/:id", c.PartialUpdateByIdHandler)
	// Deletes a user
	userGroup.DELETE("/:id", c.DeleteByIdHandler)

}

func (c *UserController) SaveHandler(ctx echo.Context) error {
	var req = models.User{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	if err := c.userRepository.Save(&req); err != nil {
		return err
	}

	return ctx.Redirect(http.StatusSeeOther, fmt.Sprintf(ShowUserUrl, req.Id))
}

func (c *UserController) GetAllPaginatedHandler(ctx echo.Context) error {
	req := commonreq.PageData{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.userRepository.GetAllPaginated(req.PageNumber, req.PageSize)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, userpages.UserIndex(res))
}

func (c *UserController) PartialUpdateByIdHandler(ctx echo.Context) error {
	req := user.PartialUpdateByIdInput{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.userRepository.PartialUpdateById(req)
	if err != nil {
		return err
	}

	return ctx.Redirect(http.StatusSeeOther, fmt.Sprintf(ShowUserUrl, res.Id))
}

func (c *UserController) DeleteByIdHandler(ctx echo.Context) error {
	req := struct {
		commonreq.GetByIdUUID
		commonreq.PageData
	}{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	if err := c.userRepository.DeleteById(req.Id); err != nil {
		return err
	}

	return ctx.Redirect(http.StatusSeeOther, "/users?page_number=1")
}

func (c *UserController) GetRegistrationPageHandler(ctx echo.Context) error {
	return core.Render(ctx, http.StatusOK, userpages.RegisterUserPage(&models.User{}))
}

func (c *UserController) GetShowUserPageHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.userRepository.GetById(req.Id)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, userpages.ShowUser(res))
}

func (c *UserController) GetEditionHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.userRepository.GetById(req.Id)
	if err != nil {
		return err
	}
	return core.Render(ctx, http.StatusOK, userpages.EditUserPage(res))
}
