package layouts

import "templ-demo/cmd/service/ui/components/drawer"

import "templ-demo/cmd/service/ui/components/icon"


import "templ-demo/core"
import "templ-demo/core/coretpls/formtag"
import "templ-demo/core/coretpls/toast"
import "templ-demo/cmd/service/ui/components/popover"
import "templ-demo/cmd/service/ui/components/selectbox"
import "templ-demo/cmd/service/ui/components/button"

templ Initial() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"/>
			<meta http-equiv="X-UA-Compatible" content="ie=edge"/>
			<link rel="stylesheet" href="/app/assets/css/styles.css"/>
			<title>My app chidita</title>
			<script>
                document.documentElement.classList.toggle(
                  "dark",
                  localStorage.theme === "dark" ||
                    (!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches),
                );
			</script>
		</head>
		<body class="transition-colors duration-300">
			@showFlash()
			@drawer.Drawer() {
				<div class="w-full bg-primary py-2 mb-3 shadow-md sticky top-0 flex flex-row justify-between">
					@drawer.Trigger(drawer.TriggerProps{
						Class: "opacity-50 hover:opacity-100 transition-all inline-block p-2 ml-3",
					}) {
						<div>
							@icon.Menu(icon.Props{
								Class: "text-secondary",
							})
						</div>
					}
                    @button.Button(button.Props{
                        Size: button.SizeIcon,
                        ID: "theme-toggle",
                        Variant: button.VariantDefault,
                    }) {
                        @icon.Sun(icon.Props{
                            
                        })
                    }
				</div>
				@drawer.Content(drawer.ContentProps{
					Position: drawer.PositionLeft,
				}) {
					@SideMenu()
				}
			}
			<div class="mx-auto max-w-7xl md:max-w-4xl px-2">
				{ children... }
			</div>
			<script src="/app/assets/js/htmx@2.0.4.min.js"></script>
			<script src="/app/assets/js/toggle-theme.js"></script>
			@formtag.Script()
			@selectbox.Script()
            @popover.Script()
		</body>
	</html>
}

templ SideMenu() {
	<div class="flex h-full flex-col justify-between bg-background">
		<div class="px-4 py-6">
			<span class="grid h-10 w-32 place-content-center rounded-lg bg-background text-xs">
				A Great app
			</span>
			<ul class="mt-6 space-y-1">
				<li>
                	<details class="group [&_summary::-webkit-details-marker]:hidden">
                		<summary
                			class="flex cursor-pointer items-center justify-between rounded-lg px-4 py-2 hover:bg-primary"
                		>
                			<span class="text-sm font-medium">Users</span>
                			<span class="shrink-0 transition duration-300 group-open:-rotate-180">
                				<svg
                					xmlns="http://www.w3.org/2000/svg"
                					class="size-5"
                					viewBox="0 0 20 20"
                					fill="currentColor"
                				>
                					<path
                						fill-rule="evenodd"
                						d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                						clip-rule="evenodd"
                					></path>
                				</svg>
                			</span>
                		</summary>
                		<ul class="mt-2 space-y-1 px-4">
                			<li>
                				<a
                					href="/app/users/new"
                					class="block rounded-lg px-4 py-2 text-sm font-medium hover:bg-primary flex flex-row"
                				>
                			        @icon.User(icon.Props{
                			            Class: "mr-2",
                			        })
                					New
                				</a>
                			</li>
                			<li>
                				<a
                					href="/app/users"
                					class="block rounded-lg px-4 py-2 text-sm font-medium hover:bg-primary flex flex-row"
                				>
                				    @icon.List(icon.Props{
                				        Class: "mr-2",
                				    })
                					All
                				</a>
                			</li>
                		</ul>
                	</details>
                </li>
			</ul>
		</div>
	</div>
}

templ drawerWithSideMenu() {
	@drawer.Drawer() {
        <div class="w-full bg-primary py-2 mb-3 shadow-md sticky top-0">
            @drawer.Trigger(drawer.TriggerProps{
                Class: "opacity-50 hover:opacity-100 transition-all inline-block p-2 ml-3",
            }) {
                <div>
                    @icon.Menu(icon.Props{
                        Class: "text-secondary",
                    })
                </div>
            }
        </div>
        @drawer.Content(drawer.ContentProps{
            Position: drawer.PositionLeft,
        }) {
            @SideMenu()
        }
    }
}

templ showFlash() {
	{{ echoTemplCtx := core.GetEchoTemplContext(ctx) }}
	{{ flashes := echoTemplCtx.GetFlash() }}
	for _, flash := range flashes {
		@toast.Toast(toast.Props{
			Icon:          true,
			Variant:       flash.Variant,
			Title:         flash.Title,
			Description:   flash.Message,
			Dismissible:   true,
			ShowIndicator: true,
		})
	}
}
