package userpages

import "templ-demo/internal/domain/models"
import "templ-demo/cmd/service/ui/components/form"
import "templ-demo/cmd/service/ui/components/label"
import "templ-demo/cmd/service/ui/components/input"
import "templ-demo/cmd/service/ui/components/button"
import "templ-demo/cmd/service/ui/components/selectbox"
import "templ-demo/core/coretpls/formtag"
import "github.com/gookit/validate"
import "github.com/invopop/ctxi18n/i18n"
import "templ-demo/core/coretpls/datetime"
import "templ-demo/cmd/service/ui/components/toggle"

type UserFormProperties struct {
	Action string
	Method string
	Class  string
}

templ UserForm(user *models.User, errors validate.Errors, props UserFormProperties) {
	@formtag.FormTag(formtag.FormTagProperties{
		Action: props.Action,
		Method: props.Method,
		Class:  props.Class,
	}) {
		<div class="mb-2">
			{{ emailKey := "email" }}
			{{ hasEmailErrors := errors.HasField(emailKey) }}
			@form.Item(form.ItemProps{}) {
				@label.Label(label.Props{
					For: emailKey,
				}) {
					Email
				}
				@input.Input(input.Props{
					ID:       emailKey,
					Name:     emailKey,
					Type:     input.TypeEmail,
					Value:    user.Email,
					HasError: hasEmailErrors,
					Required: true,
				})
				@form.Description() {
					Enter your email address for notifications.
				}
				if hasEmailErrors {
					for _,value := range errors.Field(emailKey) {
						@form.Message(form.MessageProps{
							Variant: form.MessageVariantError,
						}) {
							{ value }
						}
					}
				}
			}
			{{ passwordKey := "password" }}
			{{ hasPasswordErrors := errors.HasField(passwordKey) }}
			@form.Item(form.ItemProps{}) {
				@label.Label(label.Props{
					For: passwordKey,
				}) {
					Password
				}
				@input.Input(input.Props{
					ID:       passwordKey,
					Name:     passwordKey,
					Type:     input.TypeText,
					Value:    user.Password,
					HasError: hasPasswordErrors,
					Required: true,
				})
				@form.Description() {
					Enter your password.
				}
				if hasPasswordErrors {
					for _,value := range errors.Field(passwordKey) {
						@form.Message(form.MessageProps{
							Variant: form.MessageVariantError,
						}) {
							{ value }
						}
					}
				}
			}
			{{ createdAtKey := "created_at" }}
			{{ hasCreatedAtErrors := errors.HasField(createdAtKey) }}
			@form.Item(form.ItemProps{}) {
				@label.Label(label.Props{
					For: createdAtKey,
				}) {
					Created at
				}
				@datetime.Datetime(datetime.DatetimeProps{
				    ID: createdAtKey,
				    Name: createdAtKey,
				    Value: user.CreatedAt.UTC(),
				    HasError: hasCreatedAtErrors,
				})
				@form.Description() {
					Enter creation date.
				}
				if hasCreatedAtErrors {
					for _,value := range errors.Field(createdAtKey) {
						@form.Message(form.MessageProps{
							Variant: form.MessageVariantError,
						}) {
							{ value }
						}
					}
				}
			}

			{{ statusKey := "status" }}
            {{ hasStatusErrors := errors.HasField(statusKey) }}
            @form.Item(form.ItemProps{}) {
                @label.Label(label.Props{
                    For: statusKey,
                }) {
                    Status
                }
                @selectbox.SelectBox() {
                    @selectbox.Trigger(selectbox.TriggerProps{
                        ID: statusKey,
                        Name: statusKey,
                        Required: true,
                        HasError: hasStatusErrors,
                    }) {
                        @selectbox.Value(selectbox.ValueProps{
                            Placeholder: i18n.T(ctx, "select_placeholder"),
                        })
                    }
                    @selectbox.Content() {
                        @selectbox.Group() {
                            @selectbox.Item(selectbox.ItemProps{
                                Value: "active",
                                Selected: user.Status == "active",
                                Disabled: user.Status == "active",
                            }) {
                                Active
                            }

                            @selectbox.Item(selectbox.ItemProps{
                                Value: "deactived",
                                Selected: user.Status == "deactived",
                                Disabled: user.Status == "deactived",
                            }) {
                                Deactived
                            }
                            @selectbox.Item(selectbox.ItemProps{
                                Value: "pending",
                                Selected: user.Status == "pending",
                                Disabled: user.Status == "pending",
                            }) {
                                Pending
                            }
                        }
                    }
                }
            }
            @form.Description() {
                Enter status.
            }
            if hasStatusErrors {
                for _,value := range errors.Field(statusKey) {
                    @form.Message(form.MessageProps{
                        Variant: form.MessageVariantError,
                    }) {
                        { value }
                    }
                }
            }

            {{ canLoginKey := "can_login" }}
            @label.Label(label.Props{
                For: canLoginKey,
            }) {
                Can user login?
            }
            @form.ItemFlex() {
                @toggle.Toggle(toggle.Props{
                    ID: canLoginKey,
                    Name: canLoginKey,
                    Checked: user.CanLogin,
                })
                @form.Description() {
                    {"Check if user can login."}
                }
            }
		</div>
		@button.Button(button.Props{
			Variant: button.VariantDefault,
			Type:    button.TypeSubmit,
		}) {
			{ i18n.T(ctx, "save") }
		}
		@button.Button(button.Props{
			Type:    button.TypeSubmit,
			Variant: button.VariantGhost,
			Href:    "/app/users?page_number=1",
		}) {
			{ i18n.T(ctx, "cancel") }
		}
	}
}
