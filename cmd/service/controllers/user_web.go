// Code generated by gomancer
package controllers

import (
	"github.com/gookit/validate"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/pkg/errors"
	"net/http"
	"templ-demo/cmd/service/controllers/userpages"
	"templ-demo/core/coretpls/toast"
	"templ-demo/core/validator"

	core "templ-demo/core"
	commonreq "templ-demo/core/commonreq"
	models "templ-demo/internal/domain/models"
	users "templ-demo/internal/users"

	echo "github.com/labstack/echo/v4"
)

const (
	ShowUserRouteName = "showUser"
)

type UserWebController struct {
	userRepository *users.UserRepository
}

func NewUserWebController(userRepository *users.UserRepository) *UserWebController {
	return &UserWebController{
		userRepository: userRepository,
	}
}

func (c *UserWebController) SetUpRoutes(group *echo.Group) {
	userGroup := group.Group("/users")

	// Show all users
	userGroup.GET("", c.GetAllPaginatedHandler)
	// Send page to edit a user
	userGroup.GET("/:id/edit", c.GetEditionHandler)
	// Sends page to registry a user
	userGroup.GET("/new", c.GetRegistrationPageHandler)
	// Send page to show a user
	userGroup.GET("/:id", c.GetShowUserPageHandler).Name = ShowUserRouteName
	// Creates a user
	userGroup.POST("", c.SaveHandler)
	// Patch user
	userGroup.PATCH("/:id", c.SaveHandler)
	// Updates all user
	userGroup.PUT("/:id", c.PartialUpdateByIdHandler)
	// Deletes a user
	userGroup.DELETE("/:id", c.DeleteByIdHandler)

}

func IsValidationError(err error) (errorsMap validate.Errors, isErr bool) {
	var asValidationErr *validator.ValidationError
	isErr = errors.As(err, &asValidationErr)
	if isErr {
		return asValidationErr.Errors, isErr
	}
	return nil, isErr
}

func (c *UserWebController) SaveHandler(ctx echo.Context) error {
	var req = models.User{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		if errorsMap, isValidationErr := IsValidationError(err); isValidationErr {
			core.SetFlash(ctx, core.FlashMessage{
				Variant: toast.VariantError,
				Message: i18n.T(ctx.Request().Context(), "validation_error"),
			})
			return core.Render(ctx, http.StatusBadRequest, userpages.RegisterUserPage(&req, errorsMap))
		}
		return err
	}

	if err := c.userRepository.Save(&req); err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_registry"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, ctx.Echo().Reverse(ShowUserRouteName, req.Id))
}

func (c *UserWebController) GetAllPaginatedHandler(ctx echo.Context) error {
	req := commonreq.PageData{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.userRepository.GetAllPaginated(req.PageNumber, req.PageSize)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, userpages.UserIndex(res))
}

func (c *UserWebController) PartialUpdateByIdHandler(ctx echo.Context) error {
	req := users.PartialUpdateByIdInput{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.userRepository.PartialUpdateById(req)
	if err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_update"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, ctx.Echo().Reverse(ShowUserRouteName, res.Id))
}

func (c *UserWebController) DeleteByIdHandler(ctx echo.Context) error {
	req := struct {
		commonreq.GetByIdUUID
		commonreq.PageData
	}{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	if err := c.userRepository.DeleteById(req.Id); err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_deletion"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, "/app/users?page_number=1")
}

func (c *UserWebController) GetRegistrationPageHandler(ctx echo.Context) error {
	return core.Render(ctx, http.StatusOK, userpages.RegisterUserPage(&models.User{}, nil))
}

func (c *UserWebController) GetShowUserPageHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.userRepository.GetById(req.Id)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, userpages.ShowUser(res))
}

func (c *UserWebController) GetEditionHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.userRepository.GetById(req.Id)
	if err != nil {
		return err
	}
	return core.Render(ctx, http.StatusOK, userpages.EditUserPage(res, validate.Errors{}))
}
