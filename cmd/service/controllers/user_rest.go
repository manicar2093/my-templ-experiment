// Code generated by gomancer
package controllers

import (
	"net/http"

	echo "github.com/labstack/echo/v4"
	core "templ-demo/core"
	commonreq "templ-demo/core/commonreq"
	models "templ-demo/internal/domain/models"
	user "templ-demo/internal/user"
)

type UserController struct {
	userRepository *user.UserRepository
}

func NewUserController(userRepository *user.UserRepository) *UserController {
	return &UserController{
		userRepository: userRepository,
	}
}

func (c *UserController) SetUpRoutes(group *echo.Group) {
	userGroup := group.Group("/users")

	userGroup.GET("", c.GetAllPaginatedHandler)
	userGroup.POST("", c.SaveHandler)
	userGroup.GET("/:id", c.GetByIdHandler)
	userGroup.PATCH("/:id", c.SaveHandler)
	userGroup.PUT("/:id", c.PartialUpdateByIdHandler)
	userGroup.DELETE("/:id", c.DeleteByIdHandler)
}

func (c *UserController) SaveHandler(ctx echo.Context) error {
	var req = models.User{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	if err := c.userRepository.Save(&req); err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, &req)
}

func (c *UserController) GetByIdHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.userRepository.GetById(req.Id)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, &res)
}

func (c *UserController) GetAllPaginatedHandler(ctx echo.Context) error {
	req := commonreq.PageData{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.userRepository.GetAllPaginated(req.PageNumber, req.PageSize)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, &res)
}

func (c *UserController) PartialUpdateByIdHandler(ctx echo.Context) error {
	req := user.PartialUpdateByIdInput{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.userRepository.PartialUpdateById(req)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, &res)
}

func (c *UserController) DeleteByIdHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	if err := c.userRepository.DeleteById(req.Id); err != nil {
		return err
	}

	return ctx.NoContent(http.StatusOK)
}
